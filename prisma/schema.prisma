generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id             String           @id @default(uuid())
  name           String
  brand          String
  model          String
  description    String
  image          String?
  createAdt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  price          Float            @default(0)
  ProductToSales ProductToSales[]
  category       Categories[]
  users          Clint[]          @relation("ProductUser")

  @@map("product")
}

model Categories {
  id        String   @id @default(uuid())
  title     String
  productId String?
  product   Product? @relation(fields: [productId], references: [id])

  @@map("categories")
}

model Clint {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  contato   String
  Adress    String
  road      String
  Zipcode   String
  createAdt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Sales     Sales[]
  product   Product[] @relation("ProductUser")

  @@map("users")
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createAdt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isAdmin   Boolean

  @@map("admin")
}

model Sales {
  id             String           @id @default(uuid())
  amount         Float?
  user_id        String
  user           Clint            @relation(fields: [user_id], references: [id])
  ProductToSales ProductToSales[]
}

model ProductToSales {
  A       String
  B       String
  product Product @relation(fields: [A], references: [id], onDelete: Cascade)
  Sales   Sales   @relation(fields: [B], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_ProductToSales_AB_unique")
  @@index([B], map: "_ProductToSales_B_index")
  @@map("_ProductToSales")
}
